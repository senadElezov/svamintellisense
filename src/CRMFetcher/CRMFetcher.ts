import { IControl } from '../Interfaces/IControl'
import { IColumn } from '../Interfaces/IColumn'
import executeQuery from '../Utils/executeQuery'
import { DBControlsColumnsIntellisense } from '../DBControlsColumnsIntellisense/DBControlsColumnsIntellisense'
import WorkspaceManager from '../WorkspaceManager'
import generateColumnsString from '../Utils/generateColumnsString'
import generateControlsString from '../Utils/generateControlsString'
import { cloneDeep } from 'lodash'
import { Injectable } from '../util-classes/di/injectable'

type CRMTables = 'CDogPO' |
    'CQQOdg' |
    'CQ' |
    'CSred' |
    'CQAST_Kom' |
    'CStat' |
    'CQStdOdg' |
    'CQStdOdgST' |
    'CInf' |
    'CEmail_Predl_Pril' |
    'CR' |
    'CInfGrupe' |
    'CQQ' |
    'CKor' |
    'CPDA' |
    'CEmail' |
    'COGrupe' |
    'CP' |
    'CNab' |
    'CUpit' |
    'CML' |
    'CPPrip' |
    'CMLOP' |
    'CO_KomRegije' |
    'CZad' |
    'CO_Djel_Veza' |
    'CRjes' |
    'CIzv' |
    'CInfDet' |
    'CDog' |
    'COdnosi' |
    'COPrip' |
    'CP_Djel_Veza' |
    'CDat' |
    'CSredZauz' |
    'CPDjelatnosti' |
    'CReports' |
    'CUpitRjes' |
    'CProd' |
    'CPri' |
    'CShare' |
    'CPrihv' |
    'CBilj' |
    'CO_Post' |
    'CKam' |
    'CReportFilter' |
    'CUloge' |
    'CInfCombo' |
    'CTip' |
    'COdnosiPO' |
    'CZadDet' |
    'CDV' |
    'CEmail_Predl' |
    'CPodsj' |
    'CTipGrupa' |
    'CO' |
    'CQAST' |
    'CFaze' |
    'CQA' |
    'CFaze_C'

export type ReferencedByDict = {
    [referenceName: string]: {
        tableName: string,
        columnPairs: { parent: string, reference: string }[]
    }
}
export type CRMTablesDef = {
    [crmTable in CRMTables]?: {
        columnsDef: IColumn[],
        controlsDef: IControl[],
        filterControlsDef: IControl[]
        referencedBy: ReferencedByDict
        primaryKey: string | string[]
    }
}

export type CRMRelationsModel = {
    foreignkeyname: string,
    parenttablename: string,
    referencedtablename: string,
    parentcolumnname: string,
    referencedcolumnname: string
}

const CRM_PATH = '/app/modules/CRM/Pages';

const getCRMListPath = (crmFolderPath: string, crmTable: CRMTables) => crmFolderPath + '/' + crmTable + 'ListPage';
const getCRMPath = (crmFolderPath: string, crmTable: CRMTables) => crmFolderPath + '/' + crmTable + 'Page';

// const IMPORT_HEADER = 'import { WeakType } from "./Types/WeakType";';
const crmTables: CRMTables[] = [
    'CDogPO',
    'CQQOdg',
    'CQ',
    'CSred',
    'CQAST_Kom',
    'CStat',
    'CQStdOdg',
    'CQStdOdgST',
    'CInf',
    'CEmail_Predl_Pril',
    'CR',
    'CInfGrupe',
    'CQQ',
    'CKor',
    'CPDA',
    'CEmail',
    'COGrupe',
    'CP',
    'CNab',
    'CUpit',
    'CML',
    'CPPrip',
    'CMLOP',
    'CO_KomRegije',
    'CZad',
    'CO_Djel_Veza',
    'CRjes',
    'CIzv',
    'CInfDet',
    'CDog',
    'COdnosi',
    'COPrip',
    'CP_Djel_Veza',
    'CDat',
    'CSredZauz',
    'CPDjelatnosti',
    'CReports',
    'CUpitRjes',
    'CProd',
    'CPri',
    'CShare',
    'CPrihv',
    'CBilj',
    'CO_Post',
    'CKam',
    'CReportFilter',
    'CUloge',
    'CInfCombo',
    'CTip',
    'COdnosiPO',
    'CZadDet',
    'CDV',
    'CEmail_Predl',
    'CPodsj',
    'CTipGrupa',
    'CO',
    'CQAST',
    'CFaze',
    'CQA',
    'CFaze_C'
]

type PrimaryKeysModel = {
    tablename: CRMTables
    columnname: string,
    isautogenerated: string,
    datatype: string
}

@Injectable()
export class CRMFetcher {

    private _crmRelations: CRMRelationsModel[]

    private _primaryKeys: { [crmTable in CRMTables]?: string | string[] }

    private _workspaceManager: WorkspaceManager
    public _tableDefs: {
        [tableName: string]: {
            controls: IControl[],
            columns: IColumn[]
        }
    }

    public _crmTableDefs: CRMTablesDef
    private _ctrlCols: DBControlsColumnsIntellisense



    constructor() {
        this._tableDefs = {};
        this._crmRelations = [];
        this._workspaceManager = new WorkspaceManager();
        this._ctrlCols = new DBControlsColumnsIntellisense('oo');
        this._primaryKeys = {}
        this._crmTableDefs = {}
    }

    async fetchDatabaseModels() {

        const CRMRelationsQuery = `
        SELECT	foreignKeyName,
                parentTableName,
                referencedTableName,
                parentColumnName,
                referencedColumnName
        FROM	vWeb_ForeignKeyMetaData
        WHERE	parentTableName COLLATE CROATIAN_CS_AS LIKE 'C%' AND UPPER(SUBSTRING(parentTableName,2,1)) = SUBSTRING(parentTableName,2,1)
                AND
                referencedTableName COLLATE CROATIAN_CS_AS LIKE 'C%' AND UPPER(SUBSTRING(referencedTableName,2,1)) = SUBSTRING(referencedTableName,2,1)	`

        this._crmRelations = await executeQuery(CRMRelationsQuery, 'oo');

        const referenceDict = this._crmRelations.reduce((total: any, current) => {

            const tableKey = current.referencedtablename as CRMTables
            if (!total[tableKey]) {
                total[tableKey] = {}
            }

            if (!total[tableKey][current.foreignkeyname]) {
                total[tableKey][current.foreignkeyname] = {};
            }

            total[tableKey][current.foreignkeyname].tableName = current.parenttablename

            if (!total[tableKey][current.foreignkeyname].columnPairs) {
                total[tableKey][current.foreignkeyname].columnPairs = []
            }

            total[tableKey][current.foreignkeyname].columnPairs.push({
                parent: current.parentcolumnname,
                reference: current.referencedcolumnname
            })


            return total;
        },
            {}
        )

        await this._ctrlCols.fetchTableDefs({ dateDefault: 'datetime' });

        this._tableDefs = this._ctrlCols._tableDefs;

        crmTables.forEach((crmTable) => {
            this._crmTableDefs[crmTable] = {
                columnsDef: this._tableDefs[crmTable].columns,
                controlsDef: this._tableDefs[crmTable].controls,
                filterControlsDef: cloneDeep(this._tableDefs[crmTable].controls)
                    .filter((ctrl) => {
                        return Boolean(ctrl.svamEditorOptions?.entityDataSource)
                    })
                    .map((ctrl) => {


                        if (ctrl.svamEditorOptions) {
                            ctrl.svamEditorOptions.entityDataSource.referencedInArray = [
                                {
                                    referencedColumn: ctrl.dataField,
                                    referencedTable: crmTable,
                                    type: 'in'
                                }
                            ]
                        }

                        return { ...ctrl, validationRules: [] }
                    }),
                primaryKey: this._primaryKeys[crmTable] as any,
                referencedBy: referenceDict[crmTable] as any
            }
        });

    }

    private getPrimaryKeyPropDef = (crmTable: CRMTables) => {

        const primaryKeyDef = this._primaryKeys[crmTable];

        if (Array.isArray(primaryKeyDef)) {
            return primaryKeyDef.map((p) => p.toLowerCase() + '?:any').join('\n')
        }

        return primaryKeyDef?.toLowerCase() + '?:number'
    }

    private getPrimaryKeyString(crmTable: CRMTables) {
        const primaryKeyDef = this._primaryKeys[crmTable];

        if (Array.isArray(primaryKeyDef)) {
            return '[' + primaryKeyDef.map((p) => "'" + p.toLowerCase() + "'").join(',') + ' ]'
        }

        return "'" + primaryKeyDef?.toLowerCase() + "'" as string;
    }

    public async getCrmPrimaryKeys() {

        const pkQuery = `
        SELECT	pkInfos.tableName,
                pkInfos.columnName,
                pkInfos.isAutoGenerated,
                pkInfos.dataType
        FROM	fnWeb_GetTablePrimaryKeysInfo(NULL) pkInfos
        WHERE	tableName COLLATE CROATIAN_CS_AS LIKE 'C%' AND UPPER(SUBSTRING(tableName,2,1)) COLLATE CROATIAN_CS_AS = SUBSTRING(tableName,2,1)
                AND tableName NOT IN ('CWeb_Persistance','CALLOFF') 
        `

        const primaryKeys: PrimaryKeysModel[] = await executeQuery(pkQuery, 'oo')

        this._primaryKeys = primaryKeys.reduce((total: any, current) => {

            const tableKey = current.tablename as CRMTables;

            if (!tableKey) {
                return total;
            }

            if (total[tableKey]) {

                if (Array.isArray(total[tableKey])) {
                    (total[tableKey] as string[])?.push(current.tablename)
                    return total;
                }

                total[tableKey] = [total[tableKey] as any, current.tablename]
                return total;
            }

            total[tableKey] = current.columnname


            return total;
        },
            {}
        ) as any

    }


    private getPageConditionalPrimaryKeys(crmTable: CRMTables) {
        const primaryKeyDef = this._primaryKeys[crmTable];

        if (Array.isArray(primaryKeyDef)) {

            return 'const primaryKeyJson = props.location?.primaryKey';
        }

        return 'const id = props.match?.params?.id == -1 ? null : Number(props.match?.params?.id)'

    }

    private getIsInsert(crmTable: CRMTables) {

        const primaryKeyDef = this._primaryKeys[crmTable];

        if (Array.isArray(primaryKeyDef)) {

            return 'return !(' + primaryKeyDef.map((pkPart) => ' Boolean(props.' + pkPart.toLowerCase() + ')').join(' && ') + ')';
        }


        return 'return !Boolean(props.' + primaryKeyDef?.toLowerCase() + ')';
    }

    private getDetailsRender = (crmTable: CRMTables) => {

        const referencedBy = this._crmTableDefs[crmTable]?.referencedBy;

        if (!referencedBy) {
            return '';
        }


        return Object.entries(referencedBy).map(([referenceName, info]) => {

            const fixedColumnValues = info.columnPairs.map(({ parent, reference }) => {

                return parent.toLowerCase() + ':props.' + reference.toLowerCase()

            })
                .join(',')

            return referenceName + ':()=> <' + info.tableName + 'Grid fixedColumnValues = {{' + fixedColumnValues + '}}/>'
        }).join('\n,')

    }

    private getDetailsImport(crmTable: CRMTables) {

        const referencedBy = this._crmTableDefs[crmTable]?.referencedBy;

        if (!referencedBy) {
            return '';
        }

        return [...new Set(Object.values(referencedBy).map(({ tableName }) => tableName))].map((tableName) => {

            return "import " + tableName + "Grid from '../../" + tableName + "ListPage/Components/" + tableName + "Grid';"
        }).join('\n')
    }

    private getItems(crmTable: CRMTables) {

        const referencedBy = this._crmTableDefs[crmTable]?.referencedBy;

        if (!referencedBy) {
            return '';
        }

        return ' return [' + Object.entries(referencedBy).map(([fk, info]) => "{id:'" + fk + "',text: entityBrowserDisplays['" + info.tableName + "']}").join(',\n') + ']';

    }

    private getPrimaryKeyProps = (crmTable: CRMTables) => {

        const primaryKeyDef = this._primaryKeys[crmTable];

        if (Array.isArray(primaryKeyDef)) {

            return primaryKeyDef.map((pkPart) => pkPart.toLowerCase() + '={primaryKeyJson.' + pkPart.toLowerCase() + '}').join('\n');
        }

        return primaryKeyDef?.toLowerCase() + '={id}'

    }

    private getPrimaryKeysJSON(crmTable: CRMTables) {
        const primaryKeyDef = this._primaryKeys[crmTable];

        if (Array.isArray(primaryKeyDef)) {

            return primaryKeyDef.map((pkPart) => pkPart?.toLowerCase() + ':props.' + pkPart?.toLowerCase()).join(', ');
        }


        return primaryKeyDef?.toLowerCase() + ':props.' + primaryKeyDef?.toLowerCase()
    }

    private getMainDetailsImport(crmTable: CRMTables) {

        const referencedBy = this._crmTableDefs[crmTable]?.referencedBy;

        if (!referencedBy) {
            return '';
        }

        if (!Object.values(referencedBy)?.length) {
            return ''
        }

        return 'import ' + crmTable + 'Details from "./' + crmTable + 'Details";\n'
    }

    private getPrimaryKeyDepArray(crmTable: CRMTables) {

        const primaryKeyDef = this._primaryKeys[crmTable];

        if (Array.isArray(primaryKeyDef)) {
            return primaryKeyDef.map((p) => 'props.' + p.toLowerCase()).join(',')
        }

        return 'props.' + primaryKeyDef?.toLowerCase();
    }

    private getMainCompRender = (crmTable: CRMTables) => {

        const referencedBy = this._crmTableDefs[crmTable]?.referencedBy;

        if (!referencedBy) {
            return '    return renderMainForm()';
        }

        if (!Object.values(referencedBy)?.length) {
            return '    return renderMainForm()'
        }


        return `
    return <SvamAccordion
        multiple={true}
        expandAllItems={true}
    >
        <Item title={entityBrowserDisplays['@table']}>
            {
                renderMainForm()
            }
        </Item>
        <Item title='details'>
            <@tableDetails
                {...props}
            />
        </Item>
    </SvamAccordion>`
    }

    public async generateFolders() {

        const rootFolder = this._workspaceManager.getRootFolder();
        const rootPath = rootFolder.path;

        await this.getCrmPrimaryKeys();
        await this.fetchDatabaseModels();

        const fullCRMPath = rootPath + CRM_PATH;

        const pageListTemplate = `
import PageBase from 'core/components/PageBase'
import { IRouteComponentProps } from 'core/containers/App/Interfaces/IRouteComponentProps'
import React from 'react'
import @tableList from './Components/@tableList'

const @tableListPage = (props: IRouteComponentProps) => {

    return <PageBase
        noPadding
        wrapContent
    >
        <@tableList />
    </PageBase>
}

export default @tableListPage;

`


        const listTemplate = `
import { SvamButton, SvamDrawer } from '@svam'
import { ISvamGridProps } from '@svam/components/SvamGridTS/Interfaces/ISvamGridProps';
import { ISvamCustomStore } from '@svam/components/SvamGridTS/Interfaces/SvamCustomStore/ISvamCustomStore';
import { IdbFilter } from '@svam/components/SvamGridTS/Interfaces/SvamCustomStore/SvamPropsTransform/svamCustomStorePropsTransform';
import SvamGridTS from '@svam/components/SvamGridTS/SvamGridTS';
import { ISvamFormImperativeHandle } from '@svam/forms/SvamForm/Interfaces/ISvamFromImperativeHandle';
import SvamForm from '@svam/forms/SvamForm/SvamForm';
import useSvamHistory from '@svam/Hooks/ReactRouterHooks/useSvamHistory/useSvamHistory';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { @tableColumns } from './layout/@tableColumns';
import { @tableFilterControls } from './layout/@tableFilterControls';
import { entityBrowserDisplays } from 'repository/DBModel/entityDisplays';
import { Item } from 'devextreme-react/data-grid';

export interface I@tableListProps {

}

const @tableList = (props: I@tableListProps) => {

    const filterFormRef = useRef<ISvamFormImperativeHandle>(null);

    const [@tableListCustomStore, set@tableCustomStore] = useState<ISvamCustomStore>({
        entity: '@table',
        keyField: @primaryKey,
    })

    const [filterFormData, setFilterFormData] = useState<any>(null);

    const [filter, setFilter] = useState<IdbFilter[]>(null)

    useEffect(() => {

        if (!filterFormData) {
            setFilter(null);
            return;
        }

        const newFilter =
            Object.entries(filterFormData)
                .filter(([dataField, value]) => Boolean(value))
                .map<IdbFilter>(([dataField, value], index, arr) => {

                    return {
                        dataField,
                        value,
                        operation: '=',
                        forceRealValue:true,
                        joiner: index === arr.length - 1 ? null : 'and'
                    }

                })

        setFilter(newFilter)
    },
        [filterFormData]
    )
    const filterClicked = useCallback(() => {

        const formData = filterFormRef?.current?.getFormData(false);
        setFilterFormData(formData);
    },
        []
    )

    const { push } = useSvamHistory();
    const onRowDblClick: ISvamGridProps['onRowDblClick'] = (evParams) => {

        push('/@lowerCaseTable', { id: evParams.key });
    }

    return <SvamDrawer
        render={() => {
            return <>
                <SvamButton
                    text='filtriraj'
                    icon='filter'
                    onClick={filterClicked}
                ></SvamButton>
                <SvamForm
                    ref={filterFormRef}
                    stateStoring={true}
                    defaultColCount={1}
                    controls={@tableFilterControls}
                ></SvamForm>
            </>
        }}
    >
        <SvamGridTS
            dbFilters={filter}
            svamCustomStore={@tableListCustomStore}
            svamColumns={@tableColumns}
            onRowDblClick={onRowDblClick}
            filterRow={{
                visible:true
            }}
            renderToolbarItems={() => {
                return [
                    <Item
                        locateInMenu={'never'}
                        location='after'
                    >
                        <SvamButton
                            text={'dodaj novi zapis u ' + entityBrowserDisplays['@table']}
                            icon='add'
                            type='default'
                            onClick={() => {
                                push('/@lowerCaseTable', { id: -1 })
                            }}
                        ></SvamButton>
                    </Item>
                ]
            }}
            remoteOperations={{
                filtering: true,
                paging: true,
                sorting: true
            }}
        ></SvamGridTS>
    </SvamDrawer>
}

export default @tableList
    `

        const gridTemplate = `
import { ISvamGridProps } from '@svam/components/SvamGridTS/Interfaces/ISvamGridProps';
import { ISvamCustomStore } from '@svam/components/SvamGridTS/Interfaces/SvamCustomStore/ISvamCustomStore';
import { IdbFilter } from '@svam/components/SvamGridTS/Interfaces/SvamCustomStore/SvamPropsTransform/svamCustomStorePropsTransform';
import SvamGridTS from '@svam/components/SvamGridTS/SvamGridTS';
import React, { useEffect, useState } from 'react';
import useSvamHistory from '@svam/Hooks/ReactRouterHooks/useSvamHistory/useSvamHistory';
import { @tableColumns } from './layout/@tableColumns';
export interface I@tableProps {

    fixedColumnValues: any

}

const @tableGrid = (props: I@tableProps) => {

    const { fixedColumnValues } = props;

    const [filter, setFilter] = useState<IdbFilter[]>()

    const [svamCustomStore, setSvamCustomStore] = useState<ISvamCustomStore>({
        entity: '@table',
        keyField: @primaryKey,
        entityOperations: ['insert', 'update', 'delete']
    })
    useEffect(() => {

        if (!fixedColumnValues) {
            setFilter(null);
            return;
        }

        const getFilter = () => {

            const filter: IdbFilter[] = Object
                .entries(fixedColumnValues)
                .filter(([dataField, value]) => Boolean(value))
                .map<IdbFilter>(([dataField, value], index, arr) => {

                    return {
                        dataField,
                        value,
                        operation: '=',
                        forceRealValue:true,
                        joiner: index === arr.length - 1 ? null : 'and'
                    }
                })

            return filter;
        }

        setFilter(getFilter())
    },
        [
            fixedColumnValues && JSON.stringify(fixedColumnValues)
        ]
    )

    const {push} = useSvamHistory()
    const onRowDblClick: ISvamGridProps['onRowDblClick'] = (evParams) => {

        push('/@lowerCaseTable', { id: evParams.key });
    }

    return <SvamGridTS
        dbFilters={filter}
        svamCustomStore={svamCustomStore}
        svamColumns={@tableColumns}
        isEditable={true}
        filterRow={{
            visible:true
        }}
        onRowDblClick={onRowDblClick}
        editing={{
            allowAdding: true,
            allowUpdating: true,
            allowDeleting: true
        }}
        fixedColumnValues={fixedColumnValues}
        remoteOperations={{
            filtering: true,
            sorting: true,
            paging: true
        }}
    ></SvamGridTS>


}

export default @tableGrid;
        
        `

        const mainCompPageTemplate = `
import React from 'react';
import PageBase from 'core/components/PageBase';
import { IRouteComponentProps } from 'core/containers/App/Interfaces/IRouteComponentProps';
import @table from './Components/@table';

const @tablePage = (props: IRouteComponentProps) => {

    @pageConditionalPrimaryKeys
    
    return <PageBase
        wrapContent
    >
        <@table
            @primaryKeyProps
        />
    </PageBase>
}

export default @tablePage
        `

        const mainCompTemplate = `
import SvamAccordion from '@svam/components/SvamAccordion/SvamAccordion'
import SvamForm from '@svam/forms/SvamForm/SvamForm';
import { ISvamCustomStore } from '@svam/components/SvamGridTS/Interfaces/SvamCustomStore/ISvamCustomStore'
import useSvamHistory from '@svam/Hooks/ReactRouterHooks/useSvamHistory/useSvamHistory'
import { Item } from 'devextreme-react/accordion'
import React, { useEffect, useState } from 'react'
import { entityBrowserDisplays } from 'repository/DBModel/entityDisplays';

@mainDetailsImport
import { @tableControls } from './layout/@tableControls'


export interface I@tableProps {
    @primKeyPropsDef
}

const @table = (props: I@tableProps) => {

    const getIsInsert = () => {
        @isInsert
    }

    const [isInsert, setIsInsert] = useState<boolean>(() => getIsInsert())

    useEffect(() => {
        setIsInsert(() => getIsInsert())
    },
        [
            @primKeyDepArray
        ]
    )

    const { push } = useSvamHistory()

    const [mainFormCustomStore, setMainFormCustomStore] = useState<ISvamCustomStore>({
        keyField: @primaryKey,//primkeyarray
        entity: '@table',
        keyValue: {
            @primaryKeyJSON
        },
        insertData: {
            onInserted: (result) => {
                const primaryKey = result?.find(() => true)?.autogeneratedkey;

                if (!primaryKey) {
                    return;
                }

                push('/@lowerCaseTable', { id: primaryKey })

            }
        },
        entityOperations: ['insert', 'update', 'delete']
    })

    const renderMainForm = () => {

        return <SvamForm
            controls={@tableControls}
            svamCustomStore={mainFormCustomStore}
        ></SvamForm>
    }

    if (isInsert) {
        return renderMainForm()
    }

    @mainCompRender
}
export default @table
        `

        const detailsTemplate = `
        import { SvamDrawer } from '@svam';
        import SvamTreeList from '@svam/components/SvamTreeList/SvamTreeList';
        import { ISvamTreeViewProps } from '@svam/components/SvamTreeView/ISvamTreeViewProps';
        import SvamTreeView from '@svam/components/SvamTreeView/SvamTreeView';
        import React, { useState } from 'react';
        import { entityBrowserDisplays } from 'repository/DBModel/entityDisplays';

        @detailsImport
        
        export interface I@tableDetailsProps {
            @primKeyPropsDef
        }
        
        const @tableDetails = (props: I@tableDetailsProps) => {
        
            const getItems = () => {
                @getItems
            }
        
        
            const [treeViewItems, setTreeViewItems] = useState<ISvamTreeViewProps['items']>(() => getItems())
        
            const [selectedItem, setSelectedItem] = useState<string>(null)
        
            const renderDict = {
                @detailsRender
            }
        
            return <SvamDrawer
                render={() => {
                    return <SvamTreeView
                        items={treeViewItems}
                        selectedKey={0}
                        shortcutsDefault={true}
                        selectByClick={true}
                        keyExpr='id'
                        displayExpr={'text'}
                        selectionMode='single'
                        onItemSelectionChanged={(evParams) => {
                            const {
                                itemData,
                            } = evParams
                            setSelectedItem(itemData?.id as string);
                        }}
                    ></SvamTreeView>
                }}
            >
                {selectedItem && renderDict[selectedItem] && renderDict[selectedItem]()}
        
            </SvamDrawer>
        }
        
        export default @tableDetails;
        `

        const CRMFolderStructure = {
            ListPage: {
                type: 'folder',
                nameGetter: (crmTable: CRMTables) => crmTable + 'ListPage',
                children: [
                    {
                        name: 'Components',
                        type: 'folder',
                        children: [
                            {
                                type: 'folder',
                                name: 'layout',
                                children: [
                                    {
                                        type: 'file',
                                        nameGetter: (crmTable: CRMTables) => crmTable + 'Columns.ts',
                                        contentGetter: (crmTable: CRMTables) =>
                                            "import { ISvamColumnOptions } from '@svam/components/SvamGridTS/SubComponents/SvamColumn/Interfaces/ISvamColumnOptions';" +
                                            generateColumnsString(crmTable, this._crmTableDefs[crmTable]?.columnsDef as any)
                                    },
                                    {
                                        type: 'file',
                                        nameGetter: (crmTable: CRMTables) => crmTable + 'FilterControls.ts',
                                        contentGetter: (crmTable: CRMTables) =>
                                            "import { IEditorProps } from '@svam/forms/SvamForm/SubComponents/Editors/EditorProps';" +
                                            generateControlsString(crmTable, this._crmTableDefs[crmTable]?.filterControlsDef as any, crmTable + 'FilterControls')
                                    }
                                ]
                            },
                            {
                                type: 'file',
                                nameGetter: (crmTable: CRMTables) => crmTable + 'List.tsx',
                                contentGetter: (crmTable: CRMTables) => listTemplate
                                    .replace(new RegExp('@table', 'g'), crmTable)
                                    .replace(new RegExp('@lowerCaseTable', 'g'), crmTable.toLowerCase())
                                    .replace(new RegExp('@primaryKey', 'g'), this.getPrimaryKeyString(crmTable))
                            },
                            {
                                type: 'file',
                                nameGetter: (crmTable: CRMTables) => crmTable + 'Grid.tsx',
                                contentGetter: (crmTable: CRMTables) => gridTemplate
                                    .replace(new RegExp('@table', 'g'), crmTable)
                                    .replace(new RegExp('@lowerCaseTable', 'g'), crmTable.toLowerCase())
                                    .replace(new RegExp('@primaryKey', 'g'), this.getPrimaryKeyString(crmTable))
                            }
                        ]
                    },
                    {
                        type: 'file',
                        nameGetter: (crmTable: CRMTables) => crmTable + 'ListPage.tsx',
                        contentGetter: (crmTable: CRMTables) => pageListTemplate.replace(new RegExp('@table', 'g'), crmTable)
                    }
                ]
            },
            Page: {
                type: 'folder',
                nameGetter: (crmTable: CRMTables) => crmTable + 'Page',
                children: [
                    {
                        name: 'Components',
                        type: 'folder',
                        children: [
                            {
                                type: 'folder',
                                name: 'layout',
                                children: [
                                    {
                                        type: 'file',
                                        nameGetter: (crmTable: CRMTables) => crmTable + 'Controls.ts',
                                        contentGetter: (crmTable: CRMTables) =>
                                            "import { IEditorProps } from '@svam/forms/SvamForm/SubComponents/Editors/EditorProps';" +
                                            generateControlsString(crmTable, this._crmTableDefs[crmTable]?.controlsDef as any, crmTable + 'Controls')

                                    },
                                ]
                            },
                            {
                                type: 'file',
                                nameGetter: (crmTable: CRMTables) => crmTable + '.tsx',
                                contentGetter: (crmTable: CRMTables) => mainCompTemplate
                                    .replace(new RegExp('@mainCompRender', 'g'), this.getMainCompRender(crmTable))
                                    .replace(new RegExp('@table', 'g'), crmTable)
                                    .replace(new RegExp('@lowerCaseTable', 'g'), crmTable.toLowerCase())
                                    .replace(new RegExp('@primKeyPropsDef', 'g'), this.getPrimaryKeyPropDef(crmTable))
                                    .replace(new RegExp('@isInsert', 'g'), this.getIsInsert(crmTable))
                                    .replace(new RegExp('@primaryKeyJSON', 'g'), this.getPrimaryKeysJSON(crmTable))
                                    .replace(new RegExp('@mainDetailsImport', 'g'), this.getMainDetailsImport(crmTable))
                                    .replace(new RegExp('@primaryKeyDepArray', 'g'), this.getPrimaryKeyDepArray(crmTable))
                                    .replace(new RegExp('@primaryKey', 'g'), this.getPrimaryKeyString(crmTable))
                                    .replace(new RegExp('@primKeyDepArray', 'g'), this.getPrimaryKeyDepArray(crmTable))


                            },
                            {
                                type: 'file',
                                create: (crmTable: CRMTables) => {

                                    const referencedBy = this._crmTableDefs[crmTable]?.referencedBy;

                                    if (!referencedBy) {
                                        return false;
                                    }

                                    if (!Object.values(referencedBy).length) {
                                        return false;
                                    }

                                    return true;
                                },
                                nameGetter: (crmTable: CRMTables) => crmTable + 'Details.tsx',
                                contentGetter: (crmTable: CRMTables) => detailsTemplate
                                    .replace(new RegExp('@table', 'g'), crmTable)
                                    .replace(new RegExp('@lowerCaseTable', 'g'), crmTable.toLowerCase())
                                    .replace(new RegExp('@detailsRender', 'g'), this.getDetailsRender(crmTable))
                                    .replace(new RegExp('@detailsImport', 'g'), this.getDetailsImport(crmTable))
                                    .replace(new RegExp('@primKeyPropsDef', 'g'), this.getPrimaryKeyPropDef(crmTable))
                                    .replace(new RegExp('@getItems', 'g'), this.getItems(crmTable))
                            }
                        ]
                    },
                    {
                        type: 'file',
                        nameGetter: (crmTable: CRMTables) => crmTable + 'Page.tsx',
                        contentGetter: (crmTable: CRMTables) =>
                            mainCompPageTemplate.replace(new RegExp('@table', 'g'), crmTable)
                                .replace(new RegExp('@lowerCaseTable', 'g'), crmTable.toLowerCase())
                                .replace(new RegExp('@primaryKeyProps', 'g'), this.getPrimaryKeyProps(crmTable))
                                .replace(new RegExp('@pageConditionalPrimaryKeys', 'g'), this.getPageConditionalPrimaryKeys(crmTable))
                    }
                ]
            }
        }


        const generateFileFolder = async (crmTable: CRMTables, currentPath: string, currentObject: any) => {

            if (currentObject.type === 'folder') {
                const name = currentObject?.name || currentObject?.nameGetter(crmTable);
                const path = currentPath + '/' + name
                await this._workspaceManager.createFolder(path);

                if (!currentObject.children) {
                    return;
                }

                for (const child of currentObject.children) {
                    await generateFileFolder(crmTable, path, child);
                }
                return;
            }

            const createFunction = currentObject.create;

            if (createFunction) {
                const shouldCreate = createFunction(crmTable);
                if (!shouldCreate) {
                    return;
                }
            }

            const name = currentObject?.name || currentObject?.nameGetter(crmTable);
            const content = currentObject?.contentGetter(crmTable);
            await this._workspaceManager.createFile(currentPath + '/' + name, content);

        }

        for (const crmTable of crmTables) {
            await generateFileFolder(crmTable, fullCRMPath, CRMFolderStructure.ListPage)
            await generateFileFolder(crmTable, fullCRMPath, CRMFolderStructure.Page)
        }


    }

}