import { IColumn } from "../Interfaces/IColumn";
import { IControl } from "../Interfaces/IControl";
import { ITableMeta } from "../Interfaces/ITableMeta";
import { convertDBToDataType } from "./convertDBToDataType";
import { dataTypeToEditorType } from "./dataTypeToEditorType";

const tableMetaToInterface = (tableMeta: ITableMeta[], params?: { dateDefault: string }) => {

    const returningColumns: IColumn[] = [];
    const returningControls: IControl[] = [];

    tableMeta.map((metaRow) => {

        const dataType = convertDBToDataType[metaRow.datatype]

        const column: IColumn = {
            dataField: metaRow.columnname.toLowerCase(),
            dataType: dataType as IColumn['dataType'],
            caption: metaRow.columnname,
            visible: metaRow.isautogenerated !== true,
            allowEditing: !metaRow.isprimarykey,
            allowAdding: metaRow.isautogenerated !== true,
            
        }

        if (params?.dateDefault && dataType === 'date') {
            column.editorOptions = {
                type: params.dateDefault
            }
        }

        const control: IControl = {
            dataField: metaRow.columnname.toLowerCase(),
            editorType: dataTypeToEditorType[dataType],
            formLabel: {
                text: metaRow.columnname
            },

        }

        if (params?.dateDefault && dataType === 'date') {

            if (!control.editorOptions) {
                control.editorOptions = {};
            }

            control.editorOptions.type = params.dateDefault;
        }

        if ((metaRow.max_length === -1 || metaRow?.max_length > 500) && control.editorType === 'dxTextBox') {
            control.editorType = 'dxTextArea'
        }

        if (metaRow.is_nullable === false && metaRow.datatype !== 'bit') {
            column.validationRules = [{
                type: 'required',
                message: 'Polje "' + metaRow.columnname + '" je obavezno'
            }]

            control.validationRules = [{
                type: 'required',
                message: 'Polje "' + metaRow.columnname + '" je obavezno'
            }]
        }

        if (metaRow.referencedtablename) {
            column.svamLookup = {
                entityDataSource: {
                    entity: metaRow.referencedtablename
                }
            }

            column.dataType = 'string';
            column.calculateDisplayValue = (metaRow.referencedtablename + column.dataField + 'Display').toLowerCase();

            control.svamEditorOptions = {
                entityDataSource: {
                    entity: metaRow.referencedtablename
                }
            }

            control.editorType = 'dxSelectBox'
            if (!control.editorOptions) {
                control.editorOptions = {};
            }

            control.editorOptions.displayExpr = 'display';
            control.editorOptions.valueExpr = 'value'
        }

        if (!metaRow.isautogenerated) {
            returningControls.push(control);
        }

        returningColumns.push(column);

    })

    return {
        columns: returningColumns,
        controls: returningControls
    }
}

export default tableMetaToInterface;